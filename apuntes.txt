_hrttrhy
esto no incluira la url pero no podras colocar layout por ejemplo, para eso debes usar (berbrtb)


The diagram below shows that using onClick and useState in a nested component (toggle.js) will cause an error if the "use client" directive is not defined. This is because, by default, the components are rendered on the server where these APIs are not available. By defining the "use client" directive in toggle.js, you can tell React to render the component and its children on the client, where the APIs are available.

//ENLACE A react-confetti-explosion 
https://www.npmjs.com/package/react-confetti-explosion 

Uploadthing
Mux 
Stripe



npm install @tsparticles/react @tsparticles/engine



EJEMPLO FORMULARIO: ////////////////////////////////////////////////////////////////////


import React, { useState } from 'react';

function Formulario() {
  // Estado para almacenar los datos del formulario
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    phoneNumber: ''
  });

  // Función para manejar cambios en los campos del formulario
  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  // Función para manejar el envío del formulario
  const handleSubmit = (event) => {
    event.preventDefault();
    // Aquí puedes enviar los datos del formulario a tu servidor
    console.log('Datos del formulario:', formData);
    // También puedes realizar otras acciones, como llamar a una API, etc.
  };

  return (
    <div>
      <h2>Formulario de Registro</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="email">Correo electrónico:</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <label htmlFor="password">Contraseña:</label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <label htmlFor="phoneNumber">Número de Teléfono:</label>
          <input
            type="tel"
            id="phoneNumber"
            name="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleInputChange}
            required
          />
        </div>
        <button type="submit">Enviar</button>
      </form>
    </div>
  );
}

export default Formulario;




//TSX VS TS
En resumen, tsx se utiliza para archivos que contienen código TypeScript con sintaxis JSX, mientras que ts se utiliza para archivos que contienen código TypeScript estándar sin JSX. Ambas extensiones son importantes en el ecosistema de desarrollo de aplicaciones web modernas, especialmente en el desarrollo de aplicaciones React con TypeScript.